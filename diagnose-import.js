// Script de diagnostic pour l'import de produits
const diagnoseImport = async () => {
  console.log('üîç Diagnostic de l\'import de produits...\n');
  
  // Test 1: V√©rifier la connectivit√© de l'API
  console.log('1Ô∏è‚É£ Test de connectivit√© API...');
  try {
    const healthResponse = await fetch('http://localhost:3000/api/health');
    if (healthResponse.ok) {
      console.log('‚úÖ API accessible');
    } else {
      console.log('‚ùå API non accessible:', healthResponse.status);
    }
  } catch (error) {
    console.log('‚ùå Erreur de connectivit√©:', error.message);
  }
  
  // Test 2: Test de scraping (sans import)
  console.log('\n2Ô∏è‚É£ Test de scraping...');
  try {
    const scrapeResponse = await fetch('http://localhost:3000/api/products/import', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        url: 'https://www.alibaba.com/x/B0l3Ay?ck=pdp',
        importDirectly: false // Juste scraper, pas d'import
      })
    });
    
    const scrapeResult = await scrapeResponse.json();
    
    if (scrapeResponse.ok && scrapeResult.success) {
      console.log('‚úÖ Scraping r√©ussi');
      console.log('üìù Produit scrap√©:', scrapeResult.data?.name);
      console.log('üí∞ Prix:', scrapeResult.data?.price);
      console.log('üè∑Ô∏è Plateforme:', scrapeResult.data?.source_platform);
    } else {
      console.log('‚ùå Scraping √©chou√©:', scrapeResult.error);
    }
  } catch (error) {
    console.log('‚ùå Erreur de scraping:', error.message);
  }
  
  // Test 3: Test d'import complet
  console.log('\n3Ô∏è‚É£ Test d\'import complet...');
  try {
    const importResponse = await fetch('http://localhost:3000/api/products/import', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        url: 'https://www.alibaba.com/x/B0l3Ay?ck=pdp',
        importDirectly: true
      })
    });
    
    const importResult = await importResponse.json();
    
    console.log('üìä Statut:', importResponse.status);
    console.log('üìã R√©ponse:', JSON.stringify(importResult, null, 2));
    
    if (importResponse.ok && importResult.success) {
      console.log('‚úÖ Import r√©ussi !');
    } else {
      console.log('‚ùå Import √©chou√©');
      
      // Analyser l'erreur
      if (importResult.error) {
        console.log('üîç Type d\'erreur d√©tect√©:');
        
        if (importResult.error.includes('vendeur')) {
          console.log('   ‚Üí Probl√®me de vendeur par d√©faut');
        } else if (importResult.error.includes('cat√©gorie')) {
          console.log('   ‚Üí Probl√®me de cat√©gorie');
        } else if (importResult.error.includes('RLS') || importResult.error.includes('row-level security')) {
          console.log('   ‚Üí Probl√®me de permissions RLS');
        } else if (importResult.error.includes('API key')) {
          console.log('   ‚Üí Probl√®me de configuration Supabase');
        } else if (importResult.error.includes('column') || importResult.error.includes('does not exist')) {
          console.log('   ‚Üí Probl√®me de sch√©ma de base de donn√©es');
        } else {
          console.log('   ‚Üí Erreur inconnue');
        }
      }
    }
  } catch (error) {
    console.log('‚ùå Erreur d\'import:', error.message);
  }
  
  console.log('\nüèÅ Diagnostic termin√©');
};

// Ex√©cuter le diagnostic
diagnoseImport();